/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ar.com.ventas.frame;

import ar.com.ventas.entities.Cliente;
import ar.com.ventas.entities.CtaCteCliente;
import ar.com.ventas.entities.IvaVentas;
import ar.com.ventas.entities.Recibo;
import ar.com.ventas.main.MainFrame;
import ar.com.ventas.services.ClienteService;
import ar.com.ventas.services.CtaCteClienteService;
import ar.com.ventas.services.IvaVentasService;
import ar.com.ventas.services.ReciboService;
import java.awt.event.KeyEvent;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Mario
 */
public class VerCuentaCorrienteClienteFrame extends javax.swing.JFrame {

    private Cliente cliente = null;
    private List<Cliente> clientes = null;
    private DefaultTableModel tabla = null;
    private Long clienteId;
    public Date fechaDe = null;
    public Date fechaHasta = null;
    private SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyy");
    private DecimalFormat df = new DecimalFormat("#0.00");
//    private final Integer order_num;
//    private final String order_name;

    /**
     * Creates new form VerCuentaCorrienteCliente
     *
     * @param cli
     * @param feD
     * @param feH
     */
    public VerCuentaCorrienteClienteFrame(Cliente cli, Date feD, Date feH) {
        initComponents();
        this.cliente = cli;
        this.fechaDe = feD;
        this.fechaHasta = feH;
//        this.order_name = order_name;
//        this.order_num = order_num;
        tabla = (DefaultTableModel) tablaCtaCte.getModel();
        limpiarCampos();
        llenarCampos();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        codigoClienteTxt = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        filtroClienteABuscar = new javax.swing.JTextField();
        buscarXCodigo = new javax.swing.JButton();
        llenarComboClientesByFiltro = new javax.swing.JButton();
        comboClientes = new javax.swing.JComboBox();
        clienteEncontradoTxt = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        desdeFechaTxt = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        hastaFechaTxt = new javax.swing.JTextField();
        verCtaCte = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaCtaCte = new javax.swing.JTable();
        volverBtn = new javax.swing.JButton();
        cobrarBtn = new javax.swing.JButton();
        saldoClienteTxt = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);

        jLabel1.setText("CÃ³digo Cliente:");

        codigoClienteTxt.setText("CODIGO CLIE");
        codigoClienteTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                codigoClienteTxtKeyPressed(evt);
            }
        });

        jLabel2.setText("Buscar por Nombre:");

        filtroClienteABuscar.setText("NOMBRE CLIENTE");

        buscarXCodigo.setText("Buscar");
        buscarXCodigo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarXCodigoActionPerformed(evt);
            }
        });

        llenarComboClientesByFiltro.setText("Buscar x Nombre");
        llenarComboClientesByFiltro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                llenarComboClientesByFiltroActionPerformed(evt);
            }
        });

        comboClientes.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboClientes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboClientesActionPerformed(evt);
            }
        });

        clienteEncontradoTxt.setText("NOMBRE CLIENTE ENCONTRADO");

        jLabel3.setText("Desde Fecha:");

        desdeFechaTxt.setText("DDE FECHA");

        jLabel4.setText("dd/MM/aaaa");

        jLabel5.setText("Hasta Fecha:");

        hastaFechaTxt.setText("HSTA FECHA");

        verCtaCte.setText("Ver Cta. Cte.");
        verCtaCte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verCtaCteActionPerformed(evt);
            }
        });

        tablaCtaCte.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Fecha", "Tipo", "Nro. Documento", "Debe", "Haber", "Saldo"
            }
        ));
        jScrollPane1.setViewportView(tablaCtaCte);
        if (tablaCtaCte.getColumnModel().getColumnCount() > 0) {
            tablaCtaCte.getColumnModel().getColumn(0).setPreferredWidth(104);
            tablaCtaCte.getColumnModel().getColumn(1).setPreferredWidth(40);
            tablaCtaCte.getColumnModel().getColumn(2).setPreferredWidth(120);
            tablaCtaCte.getColumnModel().getColumn(3).setPreferredWidth(200);
            tablaCtaCte.getColumnModel().getColumn(4).setPreferredWidth(200);
            tablaCtaCte.getColumnModel().getColumn(5).setPreferredWidth(250);
        }

        volverBtn.setText("Volver");
        volverBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volverBtnActionPerformed(evt);
            }
        });

        cobrarBtn.setText("Cobrar");
        cobrarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cobrarBtnActionPerformed(evt);
            }
        });

        saldoClienteTxt.setText("SALDO");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(codigoClienteTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(buscarXCodigo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 166, Short.MAX_VALUE)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(filtroClienteABuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(llenarComboClientesByFiltro))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(149, 149, 149)
                        .addComponent(cobrarBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(volverBtn)
                        .addGap(195, 195, 195))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(clienteEncontradoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(saldoClienteTxt))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(desdeFechaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(28, 28, 28)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(hastaFechaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel4)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(35, 35, 35)
                                .addComponent(verCtaCte)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(comboClientes, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(codigoClienteTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(filtroClienteABuscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buscarXCodigo)
                    .addComponent(llenarComboClientesByFiltro))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboClientes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(clienteEncontradoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(saldoClienteTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(desdeFechaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(hastaFechaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(verCtaCte))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 460, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(volverBtn)
                    .addComponent(cobrarBtn))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void volverBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volverBtnActionPerformed
        volver();
    }//GEN-LAST:event_volverBtnActionPerformed

    private void buscarXCodigoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarXCodigoActionPerformed
        buscarXCodigo();
    }//GEN-LAST:event_buscarXCodigoActionPerformed

    private void verCtaCteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verCtaCteActionPerformed
        buscarCtaCteByCliente();
    }//GEN-LAST:event_verCtaCteActionPerformed

    private void llenarComboClientesByFiltroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_llenarComboClientesByFiltroActionPerformed
        llenarComboClientesByFiltro();
    }//GEN-LAST:event_llenarComboClientesByFiltroActionPerformed

    private void cobrarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cobrarBtnActionPerformed
        ingresarCobro();
    }//GEN-LAST:event_cobrarBtnActionPerformed

    private void comboClientesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboClientesActionPerformed
        llenarCamposCliente();
    }//GEN-LAST:event_comboClientesActionPerformed

    private void codigoClienteTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_codigoClienteTxtKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            buscarXCodigo();
        }
    }//GEN-LAST:event_codigoClienteTxtKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VerCuentaCorrienteClienteFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VerCuentaCorrienteClienteFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VerCuentaCorrienteClienteFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VerCuentaCorrienteClienteFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VerCuentaCorrienteClienteFrame(null, null, null).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buscarXCodigo;
    private javax.swing.JTextField clienteEncontradoTxt;
    private javax.swing.JButton cobrarBtn;
    private javax.swing.JTextField codigoClienteTxt;
    private javax.swing.JComboBox comboClientes;
    private javax.swing.JTextField desdeFechaTxt;
    private javax.swing.JTextField filtroClienteABuscar;
    private javax.swing.JTextField hastaFechaTxt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton llenarComboClientesByFiltro;
    private javax.swing.JTextField saldoClienteTxt;
    private javax.swing.JTable tablaCtaCte;
    private javax.swing.JButton verCtaCte;
    private javax.swing.JButton volverBtn;
    // End of variables declaration//GEN-END:variables

    private void limpiarCampos() {
        codigoClienteTxt.setText("");
        filtroClienteABuscar.setText("");
        clienteEncontradoTxt.setText("");
        desdeFechaTxt.setText("");
        hastaFechaTxt.setText("");
        comboClientes.removeAllItems();
        comboClientes.addItem("");
        codigoClienteTxt.requestFocus();
        saldoClienteTxt.setText("");
    }

    private void buscarCtaCteByCliente() {
        borrarTabla();
        List<CtaCteCliente> cta = new ArrayList<CtaCteCliente>();
        fechaDe = null;
        try {
            fechaDe = sdf.parse(desdeFechaTxt.getText());
        } catch (ParseException ex) {
            JOptionPane.showMessageDialog(this, "Fecha erronea " + fechaDe);
            Logger.getLogger(VerCuentaCorrienteClienteFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        fechaHasta = null;
        try {
            fechaHasta = sdf.parse(hastaFechaTxt.getText());
        } catch (ParseException ex) {
            JOptionPane.showMessageDialog(this, "Fecha erronea " + fechaHasta);
            Logger.getLogger(VerCuentaCorrienteClienteFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            cta = new CtaCteClienteService().getAllCtaCteClienteByCodigoYFecha(cliente, fechaDe, fechaHasta);
        } catch (Exception ex) {
            Logger.getLogger(VerCuentaCorrienteClienteFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        IvaVentas iv = new IvaVentas();
        Recibo rc = new Recibo();
        Object iva[] = new Object[6];
        Boolean cumplido = false;
        Boolean cumplir = false;
        for (CtaCteCliente ccc : cta) {
            if (fechaDe.equals(ccc.getFecha())) {
                cumplir = true;
            } else {
                if (fechaHasta.equals(ccc.getFecha())) {
                    cumplir = true;
                }
            }
            if (fechaDe.before(ccc.getFecha())) {
                if (ccc.getFecha().before(fechaHasta)) {
                    cumplir = true;
                }
            }
            if (cumplir) {
                cumplido = true;
                iva[0] = sdf.format(ccc.getFecha());
                iva[1] = ccc.getTipo();
                if (ccc.getTipo().equals("FC")) {
                    try {
                        iv = new IvaVentasService().getIvaVentasById(ccc.getFactura().getId());
                    } catch (Exception ex) {
                        Logger.getLogger(VerCuentaCorrienteClienteFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    iva[2] = iv.getNumeroFactura();
                    iva[3] = df.format(ccc.getDebe());
                    iva[4] = df.format(0);
                    iva[5] = df.format(ccc.getSaldo());
                    tabla.addRow(iva);
                } else {
                    if (ccc.getTipo().equals("RC")) {
                        try {
                            rc = new ReciboService().getReciboById(ccc.getRecibo().getId());
                        } catch (Exception ex) {
                            Logger.getLogger(VerCuentaCorrienteClienteFrame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        iva[2] = rc.getNumero();
                        iva[3] = df.format(0);
                        iva[4] = df.format(ccc.getHaber());
                        iva[5] = df.format(ccc.getSaldo());
                        tabla.addRow(iva);
                    } else {
                        if (ccc.getTipo().equals("NC")) {
                            if (ccc.getNotaCredito() != null) {
                                try {
                                    iv = new IvaVentasService().getIvaVentasById(ccc.getNotaCredito().getId());
                                } catch (Exception ex) {
                                    Logger.getLogger(VerCuentaCorrienteClienteFrame.class.getName()).log(Level.SEVERE, null, ex);
                                }
                                iva[2] = iv.getNumeroFactura();
                            } else {
                                iva[2] = "00";
                            }
                            iva[3] = df.format(0);
                            iva[4] = df.format(-ccc.getHaber());
                            iva[5] = df.format(ccc.getSaldo());
                            tabla.addRow(iva);
                        } else {
                            JOptionPane.showMessageDialog(this, "No hay movimientos");
                        }
                    }
                }
            }
            cumplir = false;
        }
        if (!cumplido) {
            iva[4] = "Sin movimientos";
            tabla.addRow(iva);
        }
        tablaCtaCte.setModel(tabla);
    }

    private void llenarComboClientesByFiltro() {
        String filtro = null;
        if (!filtroClienteABuscar.getText().isEmpty()) {
            filtro = filtroClienteABuscar.getText();
            try {
                clientes = new ClienteService().getClientesByFiltro(filtro);
            } catch (Exception ex) {
                Logger.getLogger(VerCuentaCorrienteClienteFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            for (Cliente cli : clientes) {
                comboClientes.addItem(cli.getRazonSocial());
            }
        }
    }

    private void ingresarCobro() {
        CobrarFrame cf = new CobrarFrame(cliente, fechaDe, fechaHasta);
        cf.setVisible(true);
        this.dispose();
    }

    private void llenarCamposCliente() {
        int clienteSeleccionado = comboClientes.getSelectedIndex();
        if (clienteSeleccionado > 0) {
            cliente = clientes.get(clienteSeleccionado - 1);
            codigoClienteTxt.setText(cliente.getCodigo());
            clienteEncontradoTxt.setText(cliente.getRazonSocial());
            saldoClienteTxt.setText(String.valueOf(df.format(cliente.getSaldo())));
            cobrarBtn.setEnabled(true);
            Date fecha = new Date();
            hastaFechaTxt.setText(sdf.format(fecha));
            Calendar calendar = Calendar.getInstance();
            calendar.add(Calendar.DATE, -30);
            desdeFechaTxt.setText(sdf.format(calendar.getTime()));
            desdeFechaTxt.requestFocus();
        }
    }

    private void borrarTabla() {
        int lineas = tablaCtaCte.getRowCount();
        DefaultTableModel model1 = (DefaultTableModel) tablaCtaCte.getModel();
        if (lineas > 0) {
            for (int n = 0; n < lineas; n++) {
                model1.removeRow(0);
            }
            tablaCtaCte.setModel(model1);
        }
    }

    private void buscarXCodigo() {
        if (!codigoClienteTxt.getText().isEmpty()) {
            try {
                cliente = new ClienteService().getClienteByCodigo(codigoClienteTxt.getText());
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Error en codigo Cliente");
                Logger.getLogger(VerCuentaCorrienteClienteFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (cliente != null) {
                clienteEncontradoTxt.setText(cliente.getRazonSocial());
                clienteId = cliente.getId();
                if (cliente.getSaldo() != null) {
                    saldoClienteTxt.setText(String.valueOf(df.format(cliente.getSaldo())));
                    cobrarBtn.setEnabled(true);
                }
                Date fecha = new Date();
                Calendar calendar = Calendar.getInstance();
                calendar.add(Calendar.DATE, -30);
                desdeFechaTxt.setText(sdf.format(calendar.getTime()));
                hastaFechaTxt.setText(sdf.format(fecha));
                desdeFechaTxt.requestFocus();
            } else {
                JOptionPane.showMessageDialog(this, "Error en codigo Cliente");
                codigoClienteTxt.requestFocus();
            }
        }
    }

    private void llenarCampos() {
        cobrarBtn.setEnabled(false);
        if (cliente != null) {
            codigoClienteTxt.setText(cliente.getCodigo());
            buscarXCodigo();
            if (fechaDe != null) {
                desdeFechaTxt.setText(sdf.format(fechaDe));
            } else {
                Date fecha = new Date();
                Calendar calendar = Calendar.getInstance();
                calendar.add(Calendar.DATE, -30);
                desdeFechaTxt.setText(sdf.format(calendar.getTime()));
                hastaFechaTxt.setText(sdf.format(fecha));
            }
            if (fechaHasta != null) {
                hastaFechaTxt.setText(sdf.format(fechaHasta));
            } else {
                Date fecha = new Date();
                Calendar calendar = Calendar.getInstance();
                calendar.add(Calendar.DATE, -30);
                desdeFechaTxt.setText(sdf.format(calendar.getTime()));
                hastaFechaTxt.setText(sdf.format(fecha));
            }
            buscarCtaCteByCliente();
        }
    }

    private void volver() {
        MainFrame mf = new MainFrame();
        mf.setVisible(true);
        this.dispose();
    }
}
