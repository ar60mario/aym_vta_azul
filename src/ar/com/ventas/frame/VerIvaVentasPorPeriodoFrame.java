/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ar.com.ventas.frame;

import ar.com.ventas.entities.IvaVentas;
import ar.com.ventas.main.MainFrame;
import ar.com.ventas.services.IvaVentasService;
import ar.com.ventas.services.RenglonFacturaService;
import java.awt.print.PrinterException;
import java.io.File;
import java.io.IOException;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import jxl.Workbook;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;
import jxl.write.WriteException;

/**
 *
 * @author Mario
 */
public class VerIvaVentasPorPeriodoFrame extends javax.swing.JFrame {

    private SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
    private DecimalFormat df1 = new DecimalFormat("#0.00");
    private SimpleDateFormat sdf1 = new SimpleDateFormat("yyyy");
//    private final Integer order_num;
//    private final String order_name;

    /**
     * Creates new form VerIvaVentasPorPeriodoFrame
     */
    public VerIvaVentasPorPeriodoFrame() {
        initComponents();
//        this.order_name = order_name;
//        this.order_num = order_num;
        limpiarCampos();
        colocarFechas();
        imprimirBtn.setEnabled(false);
        excelBtn.setEnabled(false);
        //llenarTabla();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        desdeFechaTxt = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        hastaFechaTxt = new javax.swing.JTextField();
        buscarBtn = new javax.swing.JButton();
        volverBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaIvaVentas = new javax.swing.JTable();
        imprimirBtn = new javax.swing.JButton();
        excelBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);

        desdeFechaTxt.setText("DESDE FECHA");

        jLabel1.setText("Desde fecha:");

        jLabel2.setText("Hasta Fecha:");

        hastaFechaTxt.setText("HASTA FECHA");
        hastaFechaTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                hastaFechaTxtKeyPressed(evt);
            }
        });

        buscarBtn.setText("Buscar");
        buscarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarBtnActionPerformed(evt);
            }
        });

        volverBtn.setText("Volver");
        volverBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volverBtnActionPerformed(evt);
            }
        });

        tablaIvaVentas.setFont(new java.awt.Font("Courier New", 0, 10)); // NOI18N
        tablaIvaVentas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Fecha", "Tp", "Nro.Fc.", "CUIT", "Cliente", "Grv.Vs.", "Grv.Cigarrillos", "Grv.Total", "Imp.Interno", "Iva", "Total"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tablaIvaVentas);
        if (tablaIvaVentas.getColumnModel().getColumnCount() > 0) {
            tablaIvaVentas.getColumnModel().getColumn(0).setPreferredWidth(40);
            tablaIvaVentas.getColumnModel().getColumn(1).setPreferredWidth(5);
            tablaIvaVentas.getColumnModel().getColumn(2).setPreferredWidth(75);
            tablaIvaVentas.getColumnModel().getColumn(3).setPreferredWidth(60);
            tablaIvaVentas.getColumnModel().getColumn(4).setPreferredWidth(158);
            tablaIvaVentas.getColumnModel().getColumn(5).setPreferredWidth(30);
            tablaIvaVentas.getColumnModel().getColumn(6).setPreferredWidth(37);
            tablaIvaVentas.getColumnModel().getColumn(7).setPreferredWidth(30);
            tablaIvaVentas.getColumnModel().getColumn(8).setPreferredWidth(30);
            tablaIvaVentas.getColumnModel().getColumn(9).setPreferredWidth(30);
            tablaIvaVentas.getColumnModel().getColumn(10).setPreferredWidth(35);
        }

        imprimirBtn.setText("Imprimir");
        imprimirBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                imprimirBtnActionPerformed(evt);
            }
        });

        excelBtn.setText("Excel");
        excelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                excelBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(desdeFechaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(hastaFechaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(buscarBtn)
                        .addGap(18, 18, 18)
                        .addComponent(imprimirBtn)
                        .addGap(18, 18, 18)
                        .addComponent(excelBtn)
                        .addGap(18, 18, 18)
                        .addComponent(volverBtn)
                        .addGap(0, 277, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(desdeFechaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(hastaFechaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buscarBtn)
                    .addComponent(volverBtn)
                    .addComponent(imprimirBtn)
                    .addComponent(excelBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 467, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void volverBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volverBtnActionPerformed
        volver();
    }//GEN-LAST:event_volverBtnActionPerformed

    private void buscarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarBtnActionPerformed
        DefaultTableModel tbl = (DefaultTableModel) tablaIvaVentas.getModel();
        llenarTabla();
        int rows = tbl.getRowCount();
        if (rows > 0) {
            excelBtn.setEnabled(true);
            imprimirBtn.setEnabled(true);
        }
    }//GEN-LAST:event_buscarBtnActionPerformed

    private void imprimirBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imprimirBtnActionPerformed
        try {
            tablaIvaVentas.print();
        } catch (PrinterException ex) {
            Logger.getLogger(VerIvaVentasPorPeriodoFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_imprimirBtnActionPerformed

    private void excelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_excelBtnActionPerformed
        grabarExcel();
    }//GEN-LAST:event_excelBtnActionPerformed

    private void hastaFechaTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_hastaFechaTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            DefaultTableModel tbl = (DefaultTableModel) tablaIvaVentas.getModel();
            llenarTabla();
            int rows = tbl.getRowCount();
            if (rows > 0) {
                excelBtn.setEnabled(true);
                imprimirBtn.setEnabled(true);
            }
        }
    }//GEN-LAST:event_hastaFechaTxtKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VerIvaVentasPorPeriodoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VerIvaVentasPorPeriodoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VerIvaVentasPorPeriodoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VerIvaVentasPorPeriodoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VerIvaVentasPorPeriodoFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buscarBtn;
    private javax.swing.JTextField desdeFechaTxt;
    private javax.swing.JButton excelBtn;
    private javax.swing.JTextField hastaFechaTxt;
    private javax.swing.JButton imprimirBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablaIvaVentas;
    private javax.swing.JButton volverBtn;
    // End of variables declaration//GEN-END:variables

    private void limpiarCampos() {
        desdeFechaTxt.setText("");
        hastaFechaTxt.setText("");
    }

    private void colocarFechas() {
        Date fecha1 = new Date();
        String fech = "01/";
        Calendar cal = Calendar.getInstance();
        int ms = cal.get(Calendar.MONTH);
        ms += 1;
        String mes = "0" + String.valueOf(ms);
        int largo = mes.length();
        mes = mes.substring(largo - 2, largo);
        fech += mes + "/";
        fech += sdf1.format(fecha1);
        desdeFechaTxt.setText(fech);
        hastaFechaTxt.setText(sdf.format(fecha1));
        hastaFechaTxt.requestFocus();
    }

    private void llenarTabla() {
        borrarTabla();
        Date df = null;
        try {
            df = sdf.parse(desdeFechaTxt.getText());
        } catch (ParseException ex) {
            Logger.getLogger(VerIvaVentasPorPeriodoFrame.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Fecha erronea");
            desdeFechaTxt.requestFocus();
            return;
        }
        Date hf = null;
        try {
            hf = sdf.parse(hastaFechaTxt.getText());
        } catch (ParseException ex) {
            Logger.getLogger(VerIvaVentasPorPeriodoFrame.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Fecha erronea");
            hastaFechaTxt.requestFocus();
            return;
        }
        List<IvaVentas> iva = null;
        try {
            iva = new IvaVentasService().getFacturasEntreFechas(df, hf);
        } catch (Exception ex) {
            Logger.getLogger(VerIvaVentasPorPeriodoFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (iva != null && !iva.isEmpty()) {
            Double tGravado = 0.00;
            //Double tNoGravado = 0.00;
            Double tGravadoCigarrillos = 0.00;
            Double tImpuestos = 0.00;
            Double tIva = 0.00;
            Double tTotal = 0.00;
            DefaultTableModel tbl = (DefaultTableModel) tablaIvaVentas.getModel();
            Double totalGravadoCigarrillosA = 0.00;
            Double totalGravadoCigarrillosB = 0.00;
            Double totalGravadoVariosA = 0.00;
            Double totalGravadoVariosB = 0.00;
            for (IvaVentas fc : iva) {
                Object ob[] = new Object[11];
                ob[0] = sdf.format(fc.getFecha());
                if (fc.getTotal() < 0.00) {
                    ob[1] = "Nc " + fc.getLetra();
                } else {
                    ob[1] = "Fc " + fc.getLetra();
                }
                String sucur = "0000";
                sucur += fc.getNumeroSucursal().toString();
                int largo = sucur.length();
                sucur = sucur.substring(largo - 4, largo);
                String numer = "00000000" + fc.getNumeroFactura().toString();
                largo = numer.length();
                numer = numer.substring(largo - 8, largo);
                ob[2] = sucur + "-" + numer;
                if (fc.getCliente() != null) {
                    ob[3] = fc.getCliente().getCuit();
                    ob[4] = fc.getCliente().getRazonSocial();
                    Double tgc = null;
                    try {
                        tgc = new RenglonFacturaService().getTotalGravadoCigarrillosByFactura(fc);
                    } catch (Exception ex) {
                        Logger.getLogger(VerIvaVentasPorPeriodoFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
//                    if (fc.getNoGravado() != null) {
//                        ob[5] = df1.format(fc.getNoGravado());
//                        tNoGravado += fc.getNoGravado();
//                    } else {
//                        ob[5] = df1.format(0.00);
//                    }
//                    if (fc.getGravadoCigarrillos() != null) {
//                        ob[6] = df1.format(fc.getGravadoCigarrillos());
//                        tGravadoCigarrillos += fc.getGravadoCigarrillos();
//                    } else {
//                        ob[6] = df1.format(0.00);
//                    }
                    ob[6] = df1.format(tgc);
                    ob[5] = df1.format(fc.getGravado() - tgc);
                    tGravado += fc.getGravado() - tgc;
                    tGravadoCigarrillos += tgc;
                    if (fc.getLetra().equals("A")) {
                        totalGravadoCigarrillosA += tgc;
                        totalGravadoVariosA += (fc.getGravado() - tgc);
                    } else {
                        totalGravadoCigarrillosB += tgc;
                        totalGravadoVariosB += (fc.getGravado() - tgc);
                    }
                    ob[7] = df1.format(fc.getGravado());
                    if (fc.getImpuesto() != null) {
                        ob[8] = df1.format(fc.getImpuesto());
                        tImpuestos += fc.getImpuesto();
                    } else {
                        ob[8] = df1.format(0.00);
                    }
                    if (fc.getIva() != null) {
                        ob[9] = df1.format(fc.getIva());
                        tIva += fc.getIva();
                    } else {
                        ob[9] = df1.format(0.00);
                    }
                    ob[10] = df1.format(fc.getTotal());
                    tTotal += fc.getTotal();
                } else {
                    ob[2] = "ANULADA";
                    ob[5] = df1.format(0.00);
                    ob[6] = df1.format(0.00);
                    ob[7] = df1.format(0.00);
                    ob[8] = df1.format(0.00);
                    ob[9] = df1.format(0.00);
                    ob[10] = df1.format(0.00);
                }
                tbl.addRow(ob);
            }
            Object ob[] = new Object[11];
            ob[0] = " ";
            ob[1] = " ";
            ob[2] = " ";
            ob[3] = " ";
            ob[4] = " ";
            ob[5] = " ";
            ob[6] = " ";
            ob[7] = " ";
            ob[8] = " ";
            ob[9] = " ";
            ob[10] = " ";
            tbl.addRow(ob);

            ob[2] = "TOTALES";
            ob[5] = df1.format(tGravado);
            Double tGravadoTotal = tGravado + tGravadoCigarrillos;
            ob[6] = df1.format(tGravadoCigarrillos);
            ob[7] = df1.format(tGravadoTotal);
            ob[8] = df1.format(tImpuestos);
            ob[9] = df1.format(tIva);
            ob[10] = df1.format(tTotal);
            tbl.addRow(ob);
            Object ob2[] = new Object[11];
            ob2[0] = " ";
            ob2[1] = " ";
            ob2[2] = "TOTAL GRAVADO";
            ob2[3] = "VARIOS FC A";
            ob2[4] = " ";
            ob2[5] = " ";
            ob2[6] = df1.format(totalGravadoVariosA);
            ob2[7] = " ";
            ob2[8] = " ";
            ob2[9] = " ";
            ob2[10] = " ";
            tbl.addRow(ob2);
            Object ob3[] = new Object[11];
            ob3[0] = " ";
            ob3[1] = " ";
            ob3[2] = "TOTAL GRAVADO";
            ob3[3] = "CIG. FC A";
            ob3[4] = " ";
            ob3[5] = " ";
            ob3[6] = df1.format(totalGravadoCigarrillosA);
            ob3[7] = " ";
            ob3[8] = " ";
            ob3[9] = " ";
            ob3[10] = " ";
            tbl.addRow(ob3);
            Object ob4[] = new Object[11];
            ob4[0] = " ";
            ob4[1] = " ";
            ob4[2] = "TOTAL GRAVADO";
            ob4[3] = "VARIOS FC B";
            ob4[4] = " ";
            ob4[5] = " ";
            ob4[6] = df1.format(totalGravadoVariosB);
            ob4[7] = " ";
            ob4[8] = " ";
            ob4[9] = " ";
            ob4[10] = " ";
            tbl.addRow(ob4);
            Object ob5[] = new Object[11];
            ob5[0] = " ";
            ob5[1] = " ";
            ob5[2] = "TOTAL GRAVADO";
            ob5[3] = "CIG. FC B";
            ob5[4] = " ";
            ob5[5] = " ";
            ob5[6] = df1.format(totalGravadoCigarrillosB);
            ob5[7] = " ";
            ob5[8] = " ";
            ob5[9] = " ";
            ob5[10] = " ";
            tbl.addRow(ob5);
            tablaIvaVentas.setModel(tbl);
        }
    }

    private void borrarTabla() {
        DefaultTableModel tbl = (DefaultTableModel) tablaIvaVentas.getModel();
        int rows = tbl.getRowCount();
        if (rows > 0) {
            for (int i = 0; i < rows; i++) {
                tbl.removeRow(0);
            }
            tablaIvaVentas.setModel(tbl);
        }
    }

    private void grabarExcel() {
        String rutaArchivo = "c:/exceliva/ivaventas.xls";
        File archivo = new File(rutaArchivo);
        if (archivo.exists()) {
            archivo.delete();
        }
        try {
            archivo.createNewFile();
        } catch (IOException ex) {
            Logger.getLogger(VerIvaVentasPorPeriodoFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        WritableWorkbook libro = null;
        try {
            libro = Workbook.createWorkbook(archivo);
        } catch (IOException ex) {
            Logger.getLogger(VerIvaVentasPorPeriodoFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        WritableSheet hoja1 = libro.createSheet("IVA Ventas - ", 0);

        try {
            hoja1.addCell(new jxl.write.Label(0, 0, "Distribuidora A&M - IVA Ventas - Período: " + desdeFechaTxt.getText().substring(3, 10)));
            hoja1.addCell(new jxl.write.Label(0, 1, "Fecha"));
            hoja1.addCell(new jxl.write.Label(1, 1, "Tipo"));
            hoja1.addCell(new jxl.write.Label(2, 1, "Número Comprobante"));
            hoja1.addCell(new jxl.write.Label(3, 1, "CUIT"));
            hoja1.addCell(new jxl.write.Label(4, 1, "Razon Social"));
            hoja1.addCell(new jxl.write.Label(5, 1, "Gravado Varios"));
            hoja1.addCell(new jxl.write.Label(6, 1, "Gravado Cigarrillos"));
            hoja1.addCell(new jxl.write.Label(7, 1, "Gravado Total"));
            hoja1.addCell(new jxl.write.Label(8, 1, "Impuestos Internos"));
            hoja1.addCell(new jxl.write.Label(9, 1, "IVA"));
            hoja1.addCell(new jxl.write.Label(10, 1, "Total"));
            DefaultTableModel tbl = (DefaultTableModel) tablaIvaVentas.getModel();
            int y = 2;
            int rows = tablaIvaVentas.getRowCount();
            for (int i = 0; i < rows; i++) {
                hoja1.addCell(new jxl.write.Label(0, y, tbl.getValueAt(i, 0).toString()));
                hoja1.addCell(new jxl.write.Label(1, y, tbl.getValueAt(i, 1).toString()));
                hoja1.addCell(new jxl.write.Label(2, y, tbl.getValueAt(i, 2).toString()));
                hoja1.addCell(new jxl.write.Label(3, y, tbl.getValueAt(i, 3).toString()));
                hoja1.addCell(new jxl.write.Label(4, y, tbl.getValueAt(i, 4).toString()));
                if (tbl.getValueAt(i, 5) != " ") {
                    hoja1.addCell(new jxl.write.Number(5, y, Double.valueOf(df1.format(Double.valueOf(tbl.getValueAt(i, 5).toString().replace(",", "."))).replace(",", "."))));
                } else {
                    hoja1.addCell(new jxl.write.Label(5, y, ""));
                }
                if (tbl.getValueAt(i, 6) != " ") {
                    hoja1.addCell(new jxl.write.Number(6, y, Double.valueOf(df1.format(Double.valueOf(tbl.getValueAt(i, 6).toString().replace(",", "."))).replace(",", "."))));
                } else {
                    hoja1.addCell(new jxl.write.Label(6, y, ""));
                }
                if (tbl.getValueAt(i, 7) != " ") {
                    hoja1.addCell(new jxl.write.Number(7, y, Double.valueOf(df1.format(Double.valueOf(tbl.getValueAt(i, 7).toString().replace(",", "."))).replace(",", "."))));
                } else {
                    hoja1.addCell(new jxl.write.Label(7, y, ""));
                }
                if (tbl.getValueAt(i, 8) != " ") {
                    hoja1.addCell(new jxl.write.Number(8, y, Double.valueOf(df1.format(Double.valueOf(tbl.getValueAt(i, 8).toString().replace(",", "."))).replace(",", "."))));
                } else {
                    hoja1.addCell(new jxl.write.Label(8, y, ""));
                }
                if (tbl.getValueAt(i, 9) != " ") {
                    hoja1.addCell(new jxl.write.Number(9, y, Double.valueOf(df1.format(Double.valueOf(tbl.getValueAt(i, 9).toString().replace(",", "."))).replace(",", "."))));
                } else {
                    hoja1.addCell(new jxl.write.Label(9, y, ""));
                }
                if (tbl.getValueAt(i, 10) != " ") {
                    hoja1.addCell(new jxl.write.Number(10, y, Double.valueOf(df1.format(Double.valueOf(tbl.getValueAt(i, 10).toString().replace(",", "."))).replace(",", "."))));
                } else {
                    hoja1.addCell(new jxl.write.Label(10, y, ""));
                }
                y += 1;
            }
        } catch (WriteException ex) {
            Logger.getLogger(VerIvaVentasPorPeriodoFrame.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error configurando Excel");
        }
        try {
            libro.write();
            libro.close();
        } catch (IOException ex) {
            Logger.getLogger(VerIvaVentasPorPeriodoFrame.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error: 528");
        } catch (WriteException ex) {
            Logger.getLogger(VerIvaVentasPorPeriodoFrame.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error: 529");
        }
        JOptionPane.showMessageDialog(this, "Excel creado correctamente");
        volver();
    }

    private void volver() {
        MainFrame mf = new MainFrame();
        mf.setVisible(true);
        this.dispose();
    }
}
