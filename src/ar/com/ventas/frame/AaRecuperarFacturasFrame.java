/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ar.com.ventas.frame;

import ar.com.ventas.entities.Cliente;
import ar.com.ventas.entities.IvaVentas;
import ar.com.ventas.services.IvaVentasService;
import com.jacob.activeX.ActiveXComponent;
import com.jacob.com.Dispatch;
import com.jacob.com.LibraryLoader;
import com.jacob.com.Variant;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import static java.lang.Math.rint;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Mario
 */
public class AaRecuperarFacturasFrame extends javax.swing.JFrame {

    private SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
    private DecimalFormat df = new DecimalFormat("#0.00");
    private List<IvaVentas> facturas = null;
    /**
     * Creates new form AaRecuperarFacturasFrame
     */
    public AaRecuperarFacturasFrame() {
        initComponents();
        llenarTabla();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        afipBtn = new javax.swing.JButton();
        salirBtn = new javax.swing.JButton();
        afipABtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("PRESENTAR EN AFIP");

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Letra", "Fecha", "N_Cliente", "Nombre", "Inscrip", "Gravado", "Impuesto", "IVA", "Total"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tabla);
        if (tabla.getColumnModel().getColumnCount() > 0) {
            tabla.getColumnModel().getColumn(0).setPreferredWidth(25);
            tabla.getColumnModel().getColumn(3).setPreferredWidth(200);
            tabla.getColumnModel().getColumn(4).setPreferredWidth(35);
        }

        afipBtn.setText("Afip B");
        afipBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                afipBtnActionPerformed(evt);
            }
        });

        salirBtn.setText("Salir");
        salirBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salirBtnActionPerformed(evt);
            }
        });

        afipABtn.setText("Afip A");
        afipABtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                afipABtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 880, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(afipBtn)
                        .addGap(18, 18, 18)
                        .addComponent(afipABtn)
                        .addGap(18, 18, 18)
                        .addComponent(salirBtn)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 355, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(afipBtn)
                    .addComponent(salirBtn)
                    .addComponent(afipABtn))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void salirBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salirBtnActionPerformed
        System.exit(0);
    }//GEN-LAST:event_salirBtnActionPerformed

    private void afipBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_afipBtnActionPerformed
        int row = tabla.getSelectedRow();
        if(row < 0){
            JOptionPane.showMessageDialog(this, "Marque una fc a Presentar");
            return;
        }
        afip();
    }//GEN-LAST:event_afipBtnActionPerformed

    private void afipABtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_afipABtnActionPerformed
        int row = tabla.getSelectedRow();
        if(row < 0){
            JOptionPane.showMessageDialog(this, "Marque una fc a Presentar");
            return;
        }
        afipA();
    }//GEN-LAST:event_afipABtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AaRecuperarFacturasFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AaRecuperarFacturasFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AaRecuperarFacturasFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AaRecuperarFacturasFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AaRecuperarFacturasFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton afipABtn;
    private javax.swing.JButton afipBtn;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton salirBtn;
    private javax.swing.JTable tabla;
    // End of variables declaration//GEN-END:variables

    private void llenarTabla() {
        facturas = null;
        try {
            facturas = new IvaVentasService().getByError();
        } catch (Exception ex) {
            Logger.getLogger(AaRecuperarFacturasFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if(facturas != null && !facturas.isEmpty()){
            DefaultTableModel tbl = (DefaultTableModel) tabla.getModel();
            for(IvaVentas f:facturas){
                Object ob[] = new Object[9];
                ob[0]=f.getLetra();
                ob[1]=sdf.format(f.getFecha());
                ob[2]=f.getCliente().getCodigo();
                ob[3]=f.getCliente().getRazonSocial();
                ob[4]=f.getCliente().getCategoriaDeIva();
                ob[5]=df.format(f.getGravado());
                ob[6]=df.format(f.getImpuesto());
                ob[7]=df.format(f.getIva());
                ob[8]=df.format(f.getTotal());
                tbl.addRow(ob);
            }
            tabla.setModel(tbl);
        }
    }

    private void afip() {
        int row = tabla.getSelectedRow();
        IvaVentas fc = facturas.get(row);
        String categoriaIva = fc.getCliente().getCategoriaDeIva().toString();
        String letraFacturaPapel = "L";
        String sucursalFacturaPapel = "0";
        String numeroFacturaPapel = "0";
        String tipoComprob = "1";
        Cliente clienteFactura = fc.getCliente();
        Double totalFactura = fc.getTotal();
        Double totalGravado = fc.getGravado();
        Double totalIva = fc.getIva();
        Double totalImpuesto = fc.getImpuesto();
        String numCae = "";
        String vencCae = "";
        String texto2Cae = "";
        try {
            LibraryLoader.loadJacobLibrary();
            ActiveXComponent wsaa = new ActiveXComponent("WSAA");
            String wsdl = "https://wsaa.afip.gov.ar/ws/services/LoginCms";
            String userdir = "c:/certifaym";
            Dispatch.call(wsaa, "Autenticar",
                    new Variant("wsfe"),
                    new Variant(userdir + "/aym2020_4232d12f5f615fc0.crt"),
                    new Variant(userdir + "/clave_privada_20124127581_202010294251.key"),
                    /*
                    new Variant(userdir + "/NUEVO_1d6437bd48efa031.crt"),
                    new Variant(userdir + "/clave_privada_20124127581_201611015439.key"),
                    */
                    new Variant(wsdl));
            String excepcion = Dispatch.get(wsaa, "Excepcion").toString();
            String token = Dispatch.get(wsaa, "Token").toString();
            String sign = Dispatch.get(wsaa, "Sign").toString();
            ActiveXComponent wsfev1 = new ActiveXComponent("WSFEv1");
            Dispatch.put(wsfev1, "Cuit", new Variant("20124127581"));
            Dispatch.put(wsfev1, "Token", new Variant(token));
            Dispatch.put(wsfev1, "Sign", new Variant(sign));
            String cache = "";
            wsdl = "https://servicios1.afip.gov.ar/wsfev1/service.asmx?WSDL";
            Dispatch.call(wsfev1, "Conectar",
                    new Variant(cache),
                    new Variant(wsdl)
            );
            String tipo_cbte = "1";
            if (categoriaIva.equals(1)) {
                tipo_cbte = "1"; //Factura A
                letraFacturaPapel = "A";
            } else {
                tipo_cbte = "6"; //Factura B
                letraFacturaPapel = "B";
            }
            tipoComprob = tipo_cbte;
            String pto_vta = "5"; // Sucursal declarada WS
            sucursalFacturaPapel = "0005";
            Variant ult = Dispatch.call(wsfev1, "CompUltimoAutorizado",
                    new Variant(tipo_cbte),
                    new Variant(pto_vta));
            excepcion = Dispatch.get(wsfev1, "Excepcion").toString();
            String fechaWs = new SimpleDateFormat("yyyyMMdd").format(new Date());
            String concepto = "1";// producto 
            String cui = clienteFactura.getCuit();
            String cuit1 = cui.substring(0, 2) + cui.substring(3, 11) + cui.substring(12, 13);
            String tipoD = clienteFactura.getTipo();
            String tipo_doc = tipoD, nro_doc = cuit1; //tipo y numero
            int cbte_nro = Integer.parseInt(ult.toString()) + 1,
                    cbt_desde = cbte_nro,
                    cbt_hasta = cbte_nro;
            numeroFacturaPapel = String.valueOf(cbte_nro);
            int largo = ("00000000" + numeroFacturaPapel).length();
            numeroFacturaPapel = ("00000000" + numeroFacturaPapel).substring(largo - 8, largo);
            String imp_total = df.format(totalFactura).toString().replaceAll("\\,", "\\.");//"124.00";
            String imp_tot_conc = "0.00";
            String imp_neto = df.format(totalGravado).toString().replaceAll("\\,", "\\.");
            String imp_iva = df.format(totalIva).toString().replaceAll("\\,", "\\.");//"21.00"
            int internos = (int) rint(totalImpuesto * 100);
            String imp_trib = "", imp_op_ex = "0.00";
            if (internos > 0) {
                imp_trib = df.format(totalImpuesto).toString().replaceAll("\\,", "\\.");
            } else {
                imp_trib = "0.00";
            }
            String fecha_cbte = fechaWs, fecha_venc_pago = "";
            String fecha_serv_desde = "", fecha_serv_hasta = "";
            String moneda_id = "PES", moneda_ctz = "1.000";
            Variant ok = Dispatch.call(wsfev1, "CrearFactura",
                    new Variant(concepto), new Variant(tipo_doc),
                    new Variant(nro_doc), new Variant(tipo_cbte),
                    new Variant(pto_vta),
                    new Variant(cbt_desde), new Variant(cbt_hasta),
                    new Variant(imp_total), new Variant(imp_tot_conc),
                    new Variant(imp_neto), new Variant(imp_iva),
                    new Variant(imp_trib), new Variant(imp_op_ex),
                    new Variant(fecha_cbte), new Variant(fecha_venc_pago),
                    new Variant(fecha_serv_desde), new Variant(fecha_serv_hasta),
                    new Variant(moneda_id), new Variant(moneda_ctz));
            if (internos > 0) {
                Variant tributo_id = new Variant(4),
                        tributo_desc = new Variant("Impuestos internos"),
                        tributo_base_imp = new Variant("0.00"),
                        tributo_alic = new Variant("0.00"),
                        tributo_importe = new Variant(df.format(totalImpuesto).toString().replaceAll("\\,", "\\."));
                Dispatch.call(wsfev1, "AgregarTributo",
                        tributo_id, tributo_desc, tributo_base_imp,
                        tributo_alic, tributo_importe);
            }
            Variant iva_id = new Variant(5), // 21%
                    iva_base_imp = new Variant(df.format(totalGravado).toString().replaceAll("\\,", "\\.")),
                    iva_importe = new Variant(df.format(totalIva).toString().replaceAll("\\,", "\\."));
            Dispatch.call(wsfev1, "AgregarIva",
                    iva_id, iva_base_imp, iva_importe);
            Dispatch.put(wsfev1, "Reprocesar", new Variant(false));
            Variant cae = Dispatch.call(wsfev1, "CAESolicitar");
            String requ = Dispatch.get(wsfev1, "XmlRequest").toString();
            String resp = Dispatch.get(wsfev1, "XmlResponse").toString();
            excepcion = Dispatch.get(wsfev1, "Excepcion").toString();
            String errmsg = Dispatch.get(wsfev1, "ErrMsg").toString();
            String obs = Dispatch.get(wsfev1, "Obs").toString();
            String vto = Dispatch.get(wsfev1, "Vencimiento").toString();
            String resultado = Dispatch.get(wsfev1, "Resultado").toString();
            numCae = cae.toString();
            if (!resultado.equals("A")) {
                JOptionPane.showMessageDialog(this, "Obs: " + obs + "\nError: " + errmsg);
                //guardarRepositorio();
                return;
            }
            if (vto != "" && vto != null) {
                vencCae = vto.substring(6, 8) + "/" + vto.substring(4, 6) + "/" + vto.substring(0, 4);
            }
            numCae = cae.toString();
            String ruta1 = "c:/comprobantes/" + tipoComprob
                    + letraFacturaPapel + sucursalFacturaPapel
                    + numeroFacturaPapel + ".xm1";
            String ruta2 = "c:/comprobantes/" + tipoComprob
                    + letraFacturaPapel + sucursalFacturaPapel
                    + numeroFacturaPapel + ".xm2";
            File archivo1 = new File(ruta1);
            File archivo2 = new File(ruta2);
            BufferedWriter bw1, bw2;
            bw1 = new BufferedWriter(new FileWriter(archivo1));
            bw2 = new BufferedWriter(new FileWriter(archivo2));
            bw1.write(requ);
            bw2.write(resp);
            bw1.close();
            bw2.close();
            int x = 0;
            Integer suma1 = 0;
            Integer suma2 = 0;
            String cadena = cuit1 + "0" + tipo_cbte + "0005" + cae + vto;
            for (int i = 0; i < 39; i++) {
                if (x == 0) {
                    int num = Integer.valueOf(cadena.substring(i, i + 1).toString());
                    suma1 += num;
                    x = 1;
                } else {
                    int num = Integer.valueOf(cadena.substring(i, i + 1).toString());
                    suma2 += num;
                    x = 0;
                }
            }
            suma1 = suma1 * 3;
            int total = suma1 + suma2;
            int dv = (int) (rint(total / 10 + .9) * 10);
            dv = dv - total;
            cadena += String.valueOf(dv);
            String txtCadenaRP = "";
            for (int i = 0; i < 40; i = i + 2) {
                String charNum = cadena.substring(i, i + 2);
                int numChar = Integer.valueOf(charNum);
                if (numChar < 50) {
                    numChar += 48;
                } else {
                    numChar += 142;
                }
                char c = (char) numChar;
                txtCadenaRP = txtCadenaRP + c;
            }
            txtCadenaRP = (char) 40 + txtCadenaRP + (char) 41;
            texto2Cae = txtCadenaRP;
        } catch (Exception e) {
            //e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error: 411");
            //guardarRepositorio();
            return;
        }
        fc.setFecha(new Date());
        fc.setLetra(letraFacturaPapel);
        fc.setNumeroSucursal(Integer.valueOf(sucursalFacturaPapel));
        fc.setNumeroFactura(Integer.valueOf(numeroFacturaPapel));
        fc.setCae(Long.valueOf(numCae));
        try {
            fc.setFechaCae(sdf.parse(vencCae));
        } catch (ParseException ex) {
            Logger.getLogger(AaRecuperarFacturasFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            new IvaVentasService().updateIvaVentas(fc);
        } catch (Exception ex) {
            Logger.getLogger(AaRecuperarFacturasFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void afipA() {
        
    }
}
