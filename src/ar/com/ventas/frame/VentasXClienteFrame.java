/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ar.com.ventas.frame;

import ar.com.ventas.entities.Cliente;
import ar.com.ventas.entities.IvaVentas;
import ar.com.ventas.entities.RenglonFactura;
import ar.com.ventas.main.MainFrame;
import ar.com.ventas.services.ClienteService;
import ar.com.ventas.services.IvaVentasService;
import ar.com.ventas.services.RenglonFacturaService;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Marcela
 */
public class VentasXClienteFrame extends javax.swing.JFrame {

    private List<Cliente> clientes = null;
    private Cliente filtroCliente;
    public SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
    public DecimalFormat df = new DecimalFormat("0.00");
    public IvaVentas facturaIV;
//    private final Integer order_num;
//    private final String order_name;

    /**
     * Creates new form VentasXClienteFrame
     */
    public VentasXClienteFrame() {
        initComponents();
//        this.order_name = order_name;
//        this.order_num = order_num;
        limpiarCampos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        volverBtn = new javax.swing.JButton();
        buscarClienteBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        codigoClienteTxt = new javax.swing.JTextField();
        nombreClienteTxt = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        comboClientes = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        fechaDesdeTxt = new javax.swing.JTextField();
        fechaHastaTxt = new javax.swing.JTextField();
        buscarMovimientosBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaReporte = new javax.swing.JTable();
        buscarClienteXCodigo = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("VENTAS POR CLIENTE");

        volverBtn.setText("Volver");
        volverBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volverBtnActionPerformed(evt);
            }
        });

        buscarClienteBtn.setText("Buscar Cliente");
        buscarClienteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarClienteBtnActionPerformed(evt);
            }
        });

        jLabel1.setText("Código Cliente:");

        codigoClienteTxt.setText("CODIGO CLIENTE");
        codigoClienteTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                codigoClienteTxtKeyPressed(evt);
            }
        });

        nombreClienteTxt.setText("NOMBRE CLIENTE");
        nombreClienteTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                nombreClienteTxtKeyPressed(evt);
            }
        });

        jLabel2.setText("Nombre Cliente:");

        comboClientes.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboClientes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboClientesActionPerformed(evt);
            }
        });
        comboClientes.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                comboClientesKeyPressed(evt);
            }
        });

        jLabel3.setText("Fecha hasta:");

        jLabel4.setText("Fecha desde:");

        fechaDesdeTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        fechaDesdeTxt.setText("FECHA DESDE");
        fechaDesdeTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fechaDesdeTxtKeyPressed(evt);
            }
        });

        fechaHastaTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        fechaHastaTxt.setText("FECHA HASTA");
        fechaHastaTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fechaHastaTxtKeyPressed(evt);
            }
        });

        buscarMovimientosBtn.setText("Buscar Movimientos");
        buscarMovimientosBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarMovimientosBtnActionPerformed(evt);
            }
        });

        tablaReporte.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Fecha", "Número", "$ Total", "$ Massalin", "Cant. Mass.", "$ Nobleza", "Cant.Nobl.", "$ Cigarrillos", "$ Tarjetas", "$ Varios"
            }
        ));
        jScrollPane1.setViewportView(tablaReporte);

        buscarClienteXCodigo.setText("Buscar");
        buscarClienteXCodigo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarClienteXCodigoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(fechaDesdeTxt))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(buscarClienteXCodigo)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel1)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(codigoClienteTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(fechaHastaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(65, 65, 65)
                                .addComponent(buscarMovimientosBtn))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(nombreClienteTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 309, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(buscarClienteBtn)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(volverBtn))
                                .addComponent(comboClientes, javax.swing.GroupLayout.PREFERRED_SIZE, 516, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 18, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(codigoClienteTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buscarClienteBtn)
                    .addComponent(nombreClienteTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(volverBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboClientes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buscarClienteXCodigo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(fechaDesdeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fechaHastaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buscarMovimientosBtn))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 315, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void volverBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volverBtnActionPerformed
        volver();
    }//GEN-LAST:event_volverBtnActionPerformed

    private void buscarClienteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarClienteBtnActionPerformed
        if (nombreClienteTxt.getText().isEmpty()) {
            codigoClienteTxt.requestFocus();
        } else {
            buscarCliByNombre();

        }
    }//GEN-LAST:event_buscarClienteBtnActionPerformed

    private void buscarMovimientosBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarMovimientosBtnActionPerformed
        buscar();
    }//GEN-LAST:event_buscarMovimientosBtnActionPerformed

    private void comboClientesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboClientesActionPerformed
        if (evt.getModifiers() == 16) {
            if (comboClientes.getSelectedIndex() > 0) {
                int itemSeleccionado = comboClientes.getSelectedIndex() - 1;
                codigoClienteTxt.setText(clientes.get(itemSeleccionado).getCodigo());
                if (!codigoClienteTxt.getText().isEmpty()) {
                    buscarCli();
                }
            }
        }
    }//GEN-LAST:event_comboClientesActionPerformed

    private void buscarClienteXCodigoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarClienteXCodigoActionPerformed
        if (!codigoClienteTxt.getText().isEmpty()) {
            buscarCli();
        } else {
            nombreClienteTxt.requestFocus();
        }
    }//GEN-LAST:event_buscarClienteXCodigoActionPerformed

    private void fechaDesdeTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fechaDesdeTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            if (fechaDesdeTxt.getText().isEmpty()) {
                fechaDesdeTxt.setText(sdf.format(new Date()));
                fechaDesdeTxt.requestFocus(); //mismo campo
            } else {
                int largo = fechaDesdeTxt.getText().length();
                if (largo == 2) {
                    Calendar cal = Calendar.getInstance();
                    int mes = cal.get(Calendar.MONTH) + 1;
                    int anio = cal.get(Calendar.YEAR);
                    String an = String.valueOf(anio);
                    String f = "0" + String.valueOf(mes);
                    if (f.length() > 2) {
                        f = f.substring(1, 3);
                    }
                    f = f + "/" + an;
                    fechaDesdeTxt.setText(fechaDesdeTxt.getText() + "/" + f);
                    fechaHastaTxt.requestFocus(); // request focus prox campo
                } else {
                    if (largo == 5) {
                        Calendar cal = Calendar.getInstance();
                        int anio = cal.get(Calendar.YEAR);
                        String an = "/" + String.valueOf(anio);
                        fechaDesdeTxt.setText(fechaDesdeTxt.getText() + an);
                        fechaHastaTxt.requestFocus(); // request focus prox campo
                    } else {
                        if (largo == 8) {
                            String x_f = fechaDesdeTxt.getText();
                            String x_f1 = x_f.substring(0, 6);
                            String x_f2 = x_f.substring(6, 8);
                            fechaDesdeTxt.setText(x_f1 + "20" + x_f2);
                            fechaHastaTxt.requestFocus(); // request focus prox campo
                        } else {
                            if (largo != 10) {
                                JOptionPane.showMessageDialog(this, "Error en fecha");
                                fechaDesdeTxt.setText("");
                                fechaDesdeTxt.requestFocus(); // request focus mismo campo
                            } else {
                                String veinte = fechaDesdeTxt.getText().substring(6, 8);
                                if (!veinte.equals("20")) {
                                    JOptionPane.showMessageDialog(this, "Error en AÑO");
                                    fechaDesdeTxt.requestFocus(); // request focus mismo campo
                                } else {
                                    fechaHastaTxt.requestFocus();// request focus prox campo
                                }
                            }
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_fechaDesdeTxtKeyPressed

    private void fechaHastaTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fechaHastaTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            if (fechaHastaTxt.getText().isEmpty()) {
                fechaHastaTxt.setText(sdf.format(new Date()));
                fechaHastaTxt.requestFocus(); //mismo campo
            } else {
                int largo = fechaHastaTxt.getText().length();
                if (largo == 2) {
                    Calendar cal = Calendar.getInstance();
                    int mes = cal.get(Calendar.MONTH) + 1;
                    int anio = cal.get(Calendar.YEAR);
                    String an = String.valueOf(anio);
                    String f = "0" + String.valueOf(mes);
                    if (f.length() > 2) {
                        f = f.substring(1, 3);
                    }
                    f = f + "/" + an;
                    fechaHastaTxt.setText(fechaHastaTxt.getText() + "/" + f);
                    buscar(); // request focus prox campo
                } else {
                    if (largo == 5) {
                        Calendar cal = Calendar.getInstance();
                        int anio = cal.get(Calendar.YEAR);
                        String an = "/" + String.valueOf(anio);
                        fechaHastaTxt.setText(fechaHastaTxt.getText() + an);
                        buscar(); // request focus prox campo
                    } else {
                        if (largo == 8) {
                            String x_f = fechaHastaTxt.getText();
                            String x_f1 = x_f.substring(0, 6);
                            String x_f2 = x_f.substring(6, 8);
                            fechaHastaTxt.setText(x_f1 + "20" + x_f2);
                            buscar(); // request focus prox campo
                        } else {
                            if (largo != 10) {
                                JOptionPane.showMessageDialog(this, "Error en fecha");
                                fechaHastaTxt.setText("");
                                fechaHastaTxt.requestFocus(); // request focus mismo campo
                            } else {
                                String veinte = fechaHastaTxt.getText().substring(6, 8);
                                if (!veinte.equals("20")) {
                                    JOptionPane.showMessageDialog(this, "Error en AÑO");
                                    fechaHastaTxt.requestFocus(); // request focus mismo campo
                                } else {
                                    buscar(); // request focus prox campo
                                }
                            }
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_fechaHastaTxtKeyPressed

    private void codigoClienteTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_codigoClienteTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            if (codigoClienteTxt.getText().isEmpty()) {
                nombreClienteTxt.requestFocus();
            } else {
                buscarCli();
            }
        }
    }//GEN-LAST:event_codigoClienteTxtKeyPressed

    private void nombreClienteTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nombreClienteTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            if (nombreClienteTxt.getText().isEmpty()) {
                codigoClienteTxt.requestFocus();
            } else {
                buscarCliByNombre();
            }
        }
    }//GEN-LAST:event_nombreClienteTxtKeyPressed

    private void comboClientesKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_comboClientesKeyPressed
        if (evt.getKeyCode() == 10) {
            int row = comboClientes.getSelectedIndex() - 1;
            filtroCliente = null;
            filtroCliente = clientes.get(row);
            codigoClienteTxt.setText(filtroCliente.getCodigo());
            buscarCli();
        }
    }//GEN-LAST:event_comboClientesKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentasXClienteFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentasXClienteFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentasXClienteFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentasXClienteFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VentasXClienteFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buscarClienteBtn;
    private javax.swing.JButton buscarClienteXCodigo;
    private javax.swing.JButton buscarMovimientosBtn;
    private javax.swing.JTextField codigoClienteTxt;
    private javax.swing.JComboBox comboClientes;
    private javax.swing.JTextField fechaDesdeTxt;
    private javax.swing.JTextField fechaHastaTxt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField nombreClienteTxt;
    private javax.swing.JTable tablaReporte;
    private javax.swing.JButton volverBtn;
    // End of variables declaration//GEN-END:variables

    private void limpiarCampos() {
        codigoClienteTxt.setText("");
        nombreClienteTxt.setText("");
        fechaDesdeTxt.setText("");
        fechaHastaTxt.setText("");
        comboClientes.removeAllItems();
        comboClientes.addItem("");
        codigoClienteTxt.requestFocus();
    }

    private void generarInforme() {
        List<RenglonFactura> rf = null;
        List<IvaVentas> iv = null;
        Double totalTotales = 0.0;
        Double totalMassalin = 0.0;
        Double totalCantidadMassalin = 0.0;
        Double totalNobleza = 0.0;
        Double totalCantidadNobleza = 0.0;
        Double totalCigarrillos = 0.0;
        Double totalTarjetas = 0.0;
        Double totalVarios = 0.0;
        Boolean volver = false;
        Date fd = null;
        Date fa = null;
        try {
            fd = sdf.parse(fechaDesdeTxt.getText());
            fa = sdf.parse(fechaHastaTxt.getText());
        } catch (ParseException ex) {
            volver = true;
            JOptionPane.showMessageDialog(this, "Verifique el formato de las fechas solicitadas");
            //Logger.getLogger(VentasXClienteFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (!volver) {
            try {
                iv = new IvaVentasService().getAllIvaVentasByCodigoYFecha(filtroCliente, fa, fd);
            } catch (Exception ex) {
                volver = true;
                JOptionPane.showMessageDialog(this, "Error al buscar Facturas del Cliente solicitado");
                Logger.getLogger(VentasXClienteFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (iv != null) {
                Boolean vale = false;
                DefaultTableModel tabla = (DefaultTableModel) tablaReporte.getModel();
                for (IvaVentas iva : iv) {
                    if (fa.equals(iva.getFecha())) {
                        vale = true;
                    }
                    if (fd.equals(iva.getFecha())) {
                        vale = true;
                    }
                    if (fd.before(iva.getFecha())) {
                        if (iva.getFecha().before(fa)) {
                            vale = true;
                        }
                    }
                    /*
                     fecha
                     nro factura
                     importe total
                     cant cig
                     cant vs
                     cant analg
                     */
                    if (vale) {
                        Object linea[] = new Object[10];
                        linea[0] = sdf.format(iva.getFecha());
                        linea[1] = iva.getNumeroFactura();
                        linea[2] = df.format(iva.getTotal());
                        totalTotales += iva.getTotal();
                        try {
                            rf = new RenglonFacturaService().getAllRenglonFacturaFromIvaVentas(iva);
                        } catch (Exception ex) {
                            Logger.getLogger(VentasXClienteFrame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        Double massalin = 0.0;
                        Double nobleza = 0.0;
                        Double cantidadMassalin = 0.0;
                        Double cantidadNobleza = 0.0;
                        Double cigarrillos = 0.0;
                        Double tarjetas = 0.0;
                        Double varios = 0.0;
                        System.out.println(rf);
                        for (RenglonFactura renglon : rf) {
                            if (renglon.getIvaVentas().getNumeroFactura().equals(iva.getNumeroFactura())) {
                                if (renglon.getProducto().getRubro().getCodigo().equals(1)) {
                                    massalin += renglon.getTotal();
                                    cantidadMassalin += renglon.getCantidad();
                                }
                                if (renglon.getProducto().getRubro().getCodigo().equals(2)) {
                                    nobleza += renglon.getTotal();
                                    cantidadNobleza += renglon.getCantidad();
                                }
                                if (renglon.getProducto().getRubro().getCodigo().equals(3)) {
                                    cigarrillos += renglon.getTotal();
                                }
                                if (renglon.getProducto().getRubro().getCodigo().equals(4)) {
                                    tarjetas += renglon.getTotal();
                                }
                                if (renglon.getProducto().getRubro().getCodigo().equals(5)) {
                                    varios += renglon.getTotal();
                                }
                            }
                        }
                        linea[3] = df.format(massalin);
                        totalMassalin += massalin;
                        linea[4] = df.format(cantidadMassalin);
                        totalCantidadMassalin += cantidadMassalin;
                        linea[5] = df.format(nobleza);
                        totalNobleza += nobleza;
                        linea[6] = df.format(cantidadNobleza);
                        totalCantidadNobleza += cantidadNobleza;
                        linea[7] = df.format(cigarrillos);
                        totalCigarrillos += cigarrillos;
                        linea[8] = df.format(tarjetas);
                        totalTarjetas += tarjetas;
                        linea[9] = df.format(varios);
                        totalVarios += varios;
                        tabla.addRow(linea);
                    }
                    vale = false;
                }
                Object linea[] = new Object[10];
                tabla.addRow(linea);
                linea[1] = "TOTAL";
                linea[2] = df.format(totalTotales);
                linea[3] = df.format(totalMassalin);
                linea[4] = df.format(totalCantidadMassalin);
                linea[5] = df.format(totalNobleza);
                linea[6] = df.format(totalCantidadNobleza);
                linea[7] = df.format(totalCigarrillos);
                linea[8] = df.format(totalTarjetas);
                linea[9] = df.format(totalVarios);
                tabla.addRow(linea);
                tablaReporte.setModel(tabla);
            } else {
                volver = true;
                JOptionPane.showMessageDialog(this, "No hay renglones en Facturas solicitadas");
            }
        }
        if (!volver) {
            try {
                rf = new RenglonFacturaService().getAllRenglonFacturaFromIvaVentas(facturaIV);
            } catch (Exception ex) {
                volver = true;
                JOptionPane.showMessageDialog(this, "Error leyendo Facturas solicitadas");
                Logger.getLogger(VentasXClienteFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void borrarTabla() {
        int rows = tablaReporte.getRowCount();
        if (rows > 0) {
            DefaultTableModel model = (DefaultTableModel) tablaReporte.getModel();
            for (int n = 0; n < rows; n++) {
                model.removeRow(0);
            }
            tablaReporte.setModel(model);
        }
    }

    private void buscar() {
        borrarTabla();
        Boolean volver = false;
        if (codigoClienteTxt.getText().isEmpty()) {
            volver = true;
        }
        if (fechaDesdeTxt.getText().isEmpty()) {
            volver = true;
        }
        if (fechaHastaTxt.getText().isEmpty()) {
            volver = true;
        }
        if (volver) {
            JOptionPane.showMessageDialog(this, "Debe completar un Codigo Cliente, y fechas desde y hasta");
        } else {
            generarInforme();
        }
    }

    private void buscarCli() {
        String cod = codigoClienteTxt.getText();
        try {
            filtroCliente = new ClienteService().getClienteByCodigo(cod);
            nombreClienteTxt.setText(filtroCliente.getRazonSocial());
            Date fecha = new Date();
            fechaHastaTxt.setText(sdf.format(fecha));
            Calendar calendar = Calendar.getInstance();
            calendar.add(Calendar.DATE, -30);
            fechaDesdeTxt.setText(sdf.format(calendar.getTime()));
            fechaDesdeTxt.requestFocus();
        } catch (Exception ex) {
            Logger.getLogger(VentasXClienteFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void buscarCliByNombre() {
        clientes = null;
        try {
            clientes = new ClienteService().getClientesByFiltro(nombreClienteTxt.getText());
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error al buscar Clientes");
            Logger.getLogger(VentasXClienteFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        comboClientes.removeAllItems();
        comboClientes.addItem("");
        if (clientes != null && !clientes.isEmpty()) {
            for (Cliente cli : clientes) {
                comboClientes.addItem(cli.getRazonSocial());
            }
        } else {
            JOptionPane.showMessageDialog(this, "No se encontro ningun cliente con esa solicitud");
        }
        comboClientes.addFocusListener(null);
        comboClientes.showPopup();
        comboClientes.requestFocus();
    }

    private void volver() {
        MainFrame mf = new MainFrame();
        mf.setVisible(true);
        this.dispose();
    }
}
