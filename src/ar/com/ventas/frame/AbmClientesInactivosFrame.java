/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ar.com.ventas.frame;

import ar.com.ventas.entities.Cliente;
import ar.com.ventas.entities.ClienteTraba;
import ar.com.ventas.entities.CustomerTraba;
import ar.com.ventas.entities.Usuario;
import ar.com.ventas.main.MainFrame;
import ar.com.ventas.services.ClienteService;
import ar.com.ventas.services.ClienteTrabaService;
import ar.com.ventas.services.CustomerTrabaService;
import ar.com.ventas.services.UsuarioService;
import java.awt.Rectangle;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JPasswordField;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Supervisor
 */
public class AbmClientesInactivosFrame extends javax.swing.JFrame {

    private List<Cliente> listadoCliente = null;
    private SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
    private Integer row;
    private Usuario usuario;
    private final Integer nivel = 1;
    private Boolean o;
//    private Integer order_num;
//    private String order_name;

    /**
     * Creates new form AbmCliente
     *
     * @param row
     */
    public AbmClientesInactivosFrame(Integer row, Boolean o) {
        initComponents();
        setearTabla();
        this.row = row;
        this.o = o;
//        this.order_name = order_name;
//        this.order_num = order_num;
        llenarTabla();
        //tablaClientes.set
        if (o) {
            alfabeticoRb.setSelected(false);
            numericoRb.setSelected(true);
        } else {
            alfabeticoRb.setSelected(true);
            numericoRb.setSelected(false);
        }
        nombreTxt.requestFocus();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        volverBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaClientes = new javax.swing.JTable();
        modificarBtn = new javax.swing.JButton();
        alfabeticoRb = new javax.swing.JRadioButton();
        numericoRb = new javax.swing.JRadioButton();
        nombreTxt = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        buscarBtn = new javax.swing.JButton();

        jMenuItem1.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("ABM CLIENTES INACTIVOS");

        volverBtn.setText("Volver");
        volverBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volverBtnActionPerformed(evt);
            }
        });

        tablaClientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "CLIENTES"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tablaClientes);

        modificarBtn.setText("Modificar");
        modificarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modificarBtnActionPerformed(evt);
            }
        });

        alfabeticoRb.setText("Alfabético");
        alfabeticoRb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alfabeticoRbActionPerformed(evt);
            }
        });

        numericoRb.setText("Numérico");
        numericoRb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numericoRbActionPerformed(evt);
            }
        });

        nombreTxt.setText("NOMBRE");
        nombreTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                nombreTxtKeyPressed(evt);
            }
        });

        jLabel1.setText("Nombre:");

        buscarBtn.setText("Buscar");
        buscarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(alfabeticoRb)
                        .addGap(18, 18, 18)
                        .addComponent(numericoRb)
                        .addGap(26, 26, 26)
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(nombreTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(buscarBtn)
                        .addGap(0, 61, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(modificarBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(volverBtn)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(alfabeticoRb)
                    .addComponent(numericoRb)
                    .addComponent(nombreTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(buscarBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 410, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(modificarBtn)
                    .addComponent(volverBtn))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void volverBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volverBtnActionPerformed
        MainFrame mainFrame = new MainFrame();
        mainFrame.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_volverBtnActionPerformed

    private void modificarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modificarBtnActionPerformed
        Cliente cliente = this.getClienteSeleccionado();
        String cod = cliente.getCodigo();
        ClienteTraba ct = null;
        CustomerTraba cuTr = null;
        try {
            ct = new ClienteTrabaService().getClienteByCodigo(cod);
        } catch (Exception ex) {
            Logger.getLogger(AbmClientesInactivosFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            cuTr = new CustomerTrabaService().getClienteByCodigo(cod);
        } catch (Exception ex) {
            Logger.getLogger(AbmClientesInactivosFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (ct.getTraba1() != null) {
            if (ct.getTraba1()) {
                JOptionPane.showMessageDialog(this, "Cliente bloqueado para Modificar.");
                return;
            }
        }
        if (cuTr.getTraba2() != null) {
            if (cuTr.getTraba2()) {
                JOptionPane.showMessageDialog(this, "Cliente bloqueado para Modificar.");
                return;
            }
        }
        if (cliente != null) {
            int r = tablaClientes.getSelectedRow();
            Boolean o;
            if (numericoRb.isSelected()) {
                o = true;
            } else {
                o = false;
            }
            ModificarClienteInactivoFrame mcf = new ModificarClienteInactivoFrame(cliente, r, o);
            mcf.setVisible(true);
            this.dispose();
        } else {
            JOptionPane.showMessageDialog(this, "Debe seleccionar un Cliente de la lista.", "Atencion",
                    JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_modificarBtnActionPerformed

    private void alfabeticoRbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alfabeticoRbActionPerformed
        if (numericoRb.isSelected()) {
            numericoRb.setSelected(false);
            alfabeticoRb.setSelected(true);
            borrarTabla();
            llenarTabla();
        } else {
            alfabeticoRb.setSelected(true);
        }
    }//GEN-LAST:event_alfabeticoRbActionPerformed

    private void numericoRbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numericoRbActionPerformed
        if (alfabeticoRb.isSelected()) {
            alfabeticoRb.setSelected(false);
            numericoRb.setSelected(true);
            borrarTabla();
            llenarTablaNumerico();
        } else {
            numericoRb.setSelected(true);
        }
    }//GEN-LAST:event_numericoRbActionPerformed

    private void buscarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarBtnActionPerformed
        if (!nombreTxt.getText().isEmpty()) {
            buscarClientesByFiltro();
        }
    }//GEN-LAST:event_buscarBtnActionPerformed

    private void nombreTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nombreTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            if (!nombreTxt.getText().isEmpty()) {
                buscarClientesByFiltro();
            }
        }
    }//GEN-LAST:event_nombreTxtKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AbmClientesInactivosFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AbmClientesInactivosFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AbmClientesInactivosFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AbmClientesInactivosFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AbmClientesInactivosFrame(null, null).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton alfabeticoRb;
    private javax.swing.JButton buscarBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton modificarBtn;
    private javax.swing.JTextField nombreTxt;
    private javax.swing.JRadioButton numericoRb;
    private javax.swing.JTable tablaClientes;
    private javax.swing.JButton volverBtn;
    // End of variables declaration//GEN-END:variables

    private void llenarTabla() {
        listadoCliente = null;
        if (row == null) {
            row = 0;
        }
        try {
            ClienteService clienteService = new ClienteService();
            if (o) {
                listadoCliente = new ClienteService().getClienteNumericoInactivos();
            } else {
                listadoCliente = clienteService.getClientesInactivosOrdenado(); // Obtengo los Clientes de la DB.
            }
        } catch (Exception ex) {
            // Logear error y mostrarlo
            JOptionPane.showInternalMessageDialog(null, "Error");
        }
        if (listadoCliente != null && !listadoCliente.isEmpty()) {
            DefaultTableModel tabla = (DefaultTableModel) tablaClientes.getModel();
            for (Cliente cliente : listadoCliente) { // Recorro la lista de administradores y lleno la tabla.
                Object[] fila = new Object[3];
                fila[0] = cliente.getCodigo();
                fila[1] = cliente.getRazonSocial();
                fila[2] = cliente.getCuit();
                tabla.addRow(fila); // Agrego la fila a la tabla
            }
            tablaClientes.setModel(tabla); // Pongo la tabla visible.
            Rectangle rect = tablaClientes.getCellRect(row, 0, true);
            tablaClientes.scrollRectToVisible(rect);
            tablaClientes.clearSelection();
            tablaClientes.setRowSelectionInterval(row, row);
        }
    }

    public void setearTabla() {
        tablaClientes.removeColumn(null);
        DefaultTableModel tabla = new DefaultTableModel();
        tabla.addColumn("CODIGO");
        tabla.addColumn("RAZON SOCIAL"); // Creo un nuevo modelo con las columnas
        tabla.addColumn("CUIT");
        nombreTxt.setText("");
        tablaClientes.setModel(tabla);
    }

    private void eliminarClienteSeleccionado() {
        int filaSeleccionada = tablaClientes.getSelectedRow();
        if (filaSeleccionada != -1) {
            int confirm = JOptionPane.showConfirmDialog(this,
                    "¿Desea eliminar al Cliente?",
                    "Borrar - Cliente",
                    JOptionPane.OK_CANCEL_OPTION);
            if (confirm == JOptionPane.OK_OPTION) {
                Cliente clienteABorrar = getClienteSeleccionado();
                try {
                    new ClienteService().deleteCliente(clienteABorrar);
                    listadoCliente.remove(filaSeleccionada);
                    llenarTabla();
                    setearTabla();
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(this,
                            "Ha ocurrido un error eliminando al Cliente",
                            "Error",
                            JOptionPane.ERROR_MESSAGE);
                }
            }
        } else {
            JOptionPane.showMessageDialog(this,
                    "Debe seleccionar un Cliente para eliminarlo.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }

    private Cliente getClienteSeleccionado() {
        Cliente cliente = null;
        int filaSeleccionada = tablaClientes.getSelectedRow();
        if (filaSeleccionada != -1 && listadoCliente != null && !listadoCliente.isEmpty()) {
            cliente = listadoCliente.get(filaSeleccionada);
        } else {
//            logger.log(Level.WARNING, "No se selecciono ningun item de la lista");
            JOptionPane.showMessageDialog(this, "Debe seleccionar un cliente de la lista.", "Atencion",
                    JOptionPane.INFORMATION_MESSAGE);
        }
        return cliente;
    }

    private void borrarTabla() {
        int rows = tablaClientes.getRowCount();
        DefaultTableModel model = (DefaultTableModel) tablaClientes.getModel();
        if (rows > 0) {
            for (int i = 0; i < rows; i++) {
                model.removeRow(0);
                listadoCliente.remove(0);
            }
            tablaClientes.setModel(model);
        }
    }

    private void llenarTablaNumerico() {
        listadoCliente = null;
        DefaultTableModel model = (DefaultTableModel) tablaClientes.getModel();
        try {
            listadoCliente = new ClienteService().getClienteNumericoInactivos();
        } catch (Exception ex) {
            Logger.getLogger(AbmClientesInactivosFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (listadoCliente != null && !listadoCliente.isEmpty()) {
            for (Cliente cli : listadoCliente) {
                Object ob[] = new Object[3];
                ob[0] = cli.getCodigo();
                ob[1] = cli.getRazonSocial();
                ob[2] = cli.getCuit();
                model.addRow(ob);
            }
            tablaClientes.setModel(model);
        }
    }

    private void buscarClientesByFiltro() {
        borrarTabla();
        String filtro = nombreTxt.getText();
        listadoCliente = null;
        try {
            listadoCliente = new ClienteService().getClientesByFiltroInactivos(filtro);
        } catch (Exception ex) {
            Logger.getLogger(AbmClientesInactivosFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (listadoCliente != null && !listadoCliente.isEmpty()) {
            DefaultTableModel tabla = (DefaultTableModel) tablaClientes.getModel();
            for (Cliente cli : listadoCliente) {
                Object ob[] = new Object[3];
                ob[0] = cli.getCodigo();
                ob[1] = cli.getRazonSocial();
                ob[2] = cli.getCuit();
                tabla.addRow(ob);
            }
            tablaClientes.setModel(tabla);
        }
    }

    private boolean habilitado() {
        FileReader fr = null;
        try {
            fr = new FileReader("c:/ventas/permisos.txt");
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        BufferedReader br = new BufferedReader(fr);
        String acceso = "";
        try {
            acceso = br.readLine();
        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            br.close();
        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (acceso.equals("1")) {
            return true;
        }
        habilitar();
        if (usuario != null) {
            return true;
        } else {
            return false;
        }
    }

    private void nuevo() {
        NuevoClienteFrame ncf = new NuevoClienteFrame();
        ncf.setVisible(true);
        this.dispose();
    }

    private void habilitar() {
        usuario = null;
        JTextField field = new JTextField("");
        String[] options = {"Ingresar"};
        int result = JOptionPane.showOptionDialog(
                null,
                field,
                "Autorización de USUARIO",
                JOptionPane.OK_CANCEL_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,
                options,
                0);
        if (field.getText().isEmpty()) {
            usuario = null;
            return;
        }
        switch (result) {
            case 0:
                int cod = Integer.valueOf(field.getText());
                try {
                    usuario = new UsuarioService().getUsuarioByCodigo(cod);
                } catch (Exception ex) {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                if (usuario != null) {
                    if (usuario.getActivo()) {
                        JPasswordField field2 = new JPasswordField("");
                        String[] opts = {"Ingresar"};
                        int resulta = JOptionPane.showOptionDialog(
                                null,
                                field2,
                                "CONTRASEÑA: " + usuario.getNombre() + ", Autorización",
                                JOptionPane.OK_CANCEL_OPTION,
                                JOptionPane.QUESTION_MESSAGE,
                                null,
                                opts,
                                0);
                        switch (resulta) {
                            case 0:
                                int contra = Integer.valueOf(new String(field2.getPassword()));
                                if (contra == usuario.getContrasena()) {
                                    if (usuario.getNivel() > nivel) {
                                        JOptionPane.showMessageDialog(this, "Usuario no Habilitado");
                                        usuario = null;
                                    } else {
                                        String f1 = sdf.format(usuario.getFecha());
                                        String f2 = sdf.format(new Date());
                                        if (usuario.getNivel() == 2) {
                                            if (!f1.equals(f2)) {
                                                JOptionPane.showMessageDialog(this, "Permiso de Usuario Vencido");
                                                usuario = null;
                                            }
                                        }
                                    }
                                } else {
                                    JOptionPane.showMessageDialog(this, "Contraseña incorrecta");
                                    usuario = null;
                                }
                                break;
                            case 1:
                                usuario = null;
                                break;
                            case -1:
                                usuario = null;
                                break;
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "USUARIO Inactivo");
                        usuario = null;
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "No existe el Usuario");
                    usuario = null;
                }
                break;
            case 1:
                usuario = null;
                break;
            case -1:
                usuario = null;
                break;
        }
    }
}
