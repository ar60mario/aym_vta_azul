/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ar.com.ventas.frame;

import com.jacob.activeX.ActiveXComponent;
import com.jacob.com.Dispatch;
import com.jacob.com.LibraryLoader;
import com.jacob.com.Variant;
import java.text.SimpleDateFormat;
import java.util.Date;

/**
 *
 * @author Mario
 */
public class TestWs extends javax.swing.JFrame {

    /**
     * Creates new form TestWs
     */
    public TestWs() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        salirBtn = new javax.swing.JButton();
        facturaBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        salirBtn.setText("Salir");
        salirBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salirBtnActionPerformed(evt);
            }
        });

        facturaBtn.setText("Factura");
        facturaBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                facturaBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(198, Short.MAX_VALUE)
                .addComponent(facturaBtn)
                .addGap(66, 66, 66)
                .addComponent(salirBtn)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(266, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(salirBtn)
                    .addComponent(facturaBtn))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void salirBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salirBtnActionPerformed
        System.exit(0);
    }//GEN-LAST:event_salirBtnActionPerformed

    private void facturaBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_facturaBtnActionPerformed
        factura();
    }//GEN-LAST:event_facturaBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TestWs.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TestWs.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TestWs.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TestWs.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TestWs().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton facturaBtn;
    private javax.swing.JButton salirBtn;
    // End of variables declaration//GEN-END:variables

    private void factura() {
        try {
            LibraryLoader.loadJacobLibrary();
            /* Crear objeto WSAA: Web Service de Autenticación y Autorización */
            ActiveXComponent wsaa = new ActiveXComponent("WSAA");
            System.out.println(Dispatch.get(wsaa, "InstallDir").toString()
                    + " "
                    + Dispatch.get(wsaa, "Version").toString()
            );
            /* Solicitar Ticket de Acceso a AFIP (cambiar URL producción) */
            String wsdl = "https://wsaahomo.afip.gov.ar/ws/services/LoginCms";
            //String userdir = System.getProperty("user.dir");
            String userdir = "c:/certifaym";
            Dispatch.call(wsaa, "Autenticar",
                    new Variant("wsfe"),
                    new Variant(userdir + "/aym2020_4232d12f5f615fc0.crt"),
                    new Variant(userdir + "/clave_privada_20124127581_202010294251.key"),
                    /*
                    new Variant(userdir + "/certificado_jose_wsaa.crt"),
                    new Variant(userdir + "/clave_privada_20124127581_201603255925.key"),
                    */
                    new Variant(wsdl));
            String excepcion = Dispatch.get(wsaa, "Excepcion").toString();
            System.out.println("Excepcion: " + excepcion);
            String token = Dispatch.get(wsaa, "Token").toString();
            String sign = Dispatch.get(wsaa, "Sign").toString();
            System.out.println("Token: " + token + "Sign: " + sign);

            /* Instanciar WSFEv1: WebService de Factura Electrónica version 1 */
            ActiveXComponent wsfev1 = new ActiveXComponent("WSFEv1");

            /* Establecer parametros de uso: */
            Dispatch.put(wsfev1, "Cuit", new Variant("20124127581"));
            Dispatch.put(wsfev1, "Token", new Variant(token));
            Dispatch.put(wsfev1, "Sign", new Variant(sign));

            /* Conectar al websrvice (cambiar URL para producción) */
            wsdl = "https://wswhomo.afip.gov.ar/wsfev1/service.asmx?WSDL";
            Dispatch.call(wsfev1, "Conectar",
                    new Variant(""),
                    new Variant(wsdl));

            /* Consultar último comprobante autorizado en AFIP */
            String tipo_cbte = "6";
            String pto_vta = "5";
            Variant ult = Dispatch.call(wsfev1, "CompUltimoAutorizado",
                    new Variant(tipo_cbte),
                    new Variant(pto_vta));
            System.out.println("Ultimo comprobante: " + ult.toString());
            excepcion = Dispatch.get(wsfev1, "Excepcion").toString();
            System.out.println("Excepcion: " + excepcion);

            /* CAE */
            String fecha = new SimpleDateFormat("yyyyMMdd").format(new Date());
            String concepto = "1";// producto 
            String tipo_doc = "80", nro_doc = "20142553202"; //tpio y numero
            int cbte_nro = Integer.parseInt(ult.toString()) + 1,
                    cbt_desde = cbte_nro,
                    cbt_hasta = cbte_nro;
            String imp_total = "242,00".replaceAll("\\,", "\\.");
            String imp_tot_conc = "0.00";
            String imp_neto = "242.00";
            String imp_iva = "0.00", imp_trib = "0.00", imp_op_ex = "0.00";
            String fecha_cbte = fecha, fecha_venc_pago = "";
            /* Fechas período del servicio facturado (solo si concepto> 1) */
            String fecha_serv_desde = "", fecha_serv_hasta = "";
            String moneda_id = "PES", moneda_ctz = "1.000";

            Variant ok = Dispatch.call(wsfev1, "CrearFactura",
                    new Variant(concepto), new Variant(tipo_doc),
                    new Variant(nro_doc), new Variant(tipo_cbte),
                    new Variant(pto_vta),
                    new Variant(cbt_desde), new Variant(cbt_hasta),
                    new Variant(imp_total), new Variant(imp_tot_conc),
                    new Variant(imp_neto), new Variant(imp_iva),
                    new Variant(imp_trib), new Variant(imp_op_ex),
                    new Variant(fecha_cbte), new Variant(fecha_venc_pago),
                    new Variant(fecha_serv_desde), new Variant(fecha_serv_hasta),
                    new Variant(moneda_id), new Variant(moneda_ctz));

            /* Agrego los comprobantes asociados: */
            if (false) { /* solo nc/nd */

                Variant cbte_asoc_tipo = new Variant("19"),
                        cbte_asoc_pto_vta = new Variant("2"),
                        cbte_asoc_nro = new Variant("1236");
                Dispatch.call(wsfev1, "AgregarCmpAsoc",
                        cbte_asoc_tipo, cbte_asoc_pto_vta, cbte_asoc_nro);
            }

            /* Agrego impuestos varios */
            Variant tributo_id = new Variant(4),
                    tributo_desc = new Variant("Impuestos internos"),
                    tributo_base_imp = new Variant("0.00"),
                    tributo_alic = new Variant("0.00"),
                    tributo_importe = new Variant("0.00");
            Dispatch.call(wsfev1, "AgregarTributo",
                    tributo_id, tributo_desc, tributo_base_imp,
                    tributo_alic, tributo_importe);

            /* Agrego tasas de IVA */
            Variant iva_id = new Variant(3), /* 21% */
                    iva_base_imp = new Variant("242.00"),
                    iva_importe = new Variant("0.00");
            Dispatch.call(wsfev1, "AgregarIva",
                    iva_id, iva_base_imp, iva_importe);

            /* Habilito reprocesamiento automático (predeterminado): */
            Dispatch.put(wsfev1, "Reprocesar", new Variant(true));

            /* Solicito CAE (llamando al webservice de AFIP): */
            Variant cae = Dispatch.call(wsfev1, "CAESolicitar");

            /* Mostrar mensajes XML enviados y recibidos (depuración) */
            System.out.println("XmlRequest: "
                    + Dispatch.get(wsfev1, "XmlRequest").toString());
            System.out.println("XmlResponse: "
                    + Dispatch.get(wsfev1, "XmlResponse").toString());

            excepcion = Dispatch.get(wsfev1, "Excepcion").toString();
            System.out.println("Excepcion: " + excepcion);

            String errmsg = Dispatch.get(wsfev1, "ErrMsg").toString();
            System.out.println("ErrMsg: " + errmsg);
            String obs = Dispatch.get(wsfev1, "Obs").toString();
            System.out.println("Obs: " + obs);

            /* datos devueltos */
            System.out.println("CAE: " + cae.toString());
            String resultado = Dispatch.get(wsfev1, "Resultado").toString();
            System.out.println("Resultado: " + resultado);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
